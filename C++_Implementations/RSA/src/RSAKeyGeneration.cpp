/// This file handles generation of RSA Keys in C++
///
/// Libaries Used : OpenSSL BIGNUM for dealing with extremely large integers
/// Author        : Jamie Barbour-Moore
/// Created       : 05/12/25
/// Updated       : 05/13/25

#include "RSAKeyGeneration.hpp"

RSAKeyGeneration::RSAKeyGeneration(int keylength){
    keylength_ = keylength;

    setEParameters();
    setMinPQDiff();
    setMinPrimeValue();
}

void RSAKeyGeneration::generateRSAKeysUsingProvablePrimes(){
    // generate a random public exponent
    generateRandomE();
    char *hex_e = BN_bn2hex(e_);
    printf("The value of e is %s\n", hex_e);
    OPENSSL_free(hex_e);

    // generate a random seed
    generateRandomSeed();
    char *hex_seed = BN_bn2hex(seed_);
    printf("The value of seed is %s\n", hex_seed);
    OPENSSL_free(hex_seed);

    constructTheProvablePrimes();
}

void RSAKeyGeneration::generateRandomE(){
    int security_strength = getSecurityStrength();

    BIGNUM *random = BN_new();

    int bits = 256 - 16;

    // generate the random value in the range
    int success = BN_rand_ex(random, bits, BN_RAND_TOP_ANY, BN_RAND_BOTTOM_ODD, security_strength, context_);

    assert(success == 1);

    // add the random value to e_min
    BN_add(e_, random, e_min_);

    BN_free(random);
}

bool RSAKeyGeneration::constructTheProvablePrimes(){

    char* hex_first_seed = BN_bn2hex(seed_);

    ProvablePrimeGenerationResult result = constructAProvablePrimePotentiallyWithConditions(getPrimeLength(), 1, 1, hex_first_seed);

    if (result.success != true) {
        printf("Failed to construct provable prime 'p'\n");
        return false;
    }else {
        printf("prime hex : %s\n", result.prime);
    }
    
    return false;
};

ProvablePrimeGenerationResult RSAKeyGeneration::constructAProvablePrimePotentiallyWithConditions(int L, int N1, int N2, char* first_seed_char){
    ProvablePrimeGenerationResult result = ProvablePrimeGenerationResult{};

    BIGNUM *first_seed = BN_new();
    BN_hex2bn(&first_seed, first_seed_char);

    // generate an auxillary prime of length N1
    int p1 = 0;
    BIGNUM *p2_seed = BN_new();
    if (N1 == 1){
        p1 = 1;
        BN_copy(p2_seed, first_seed);
    } else {
        assert(N1 == 1);
    }

    // generate an auxillary prime of length N2
    int p2 = 0;
    BIGNUM *p0_seed = BN_new();
    if (N2 == 1){
        p2 = 1;
        BN_copy(p0_seed, p2_seed);
    } else {
        assert(N2 == 1);
    }

    int length = L/2;
    if (L % 2 != 0) {
        length += 1;
    }

    ShaweTaylorRandomPrimeResult shawe_taylor_result = generateRandomPrimeWithShaweTaylor(length, p0_seed);


    return result;
};

BIGNUM* RSAKeyGeneration::hashBigNum(BIGNUM* bignum_to_hash){
    BIGNUM *hash_result = BN_new();

    size_t size = BN_num_bytes(bignum_to_hash);
    unsigned char *value_to_hash = new unsigned char[size]();
    
    BN_bn2bin(bignum_to_hash, value_to_hash);

    EVP_MD_CTX *hash_context = EVP_MD_CTX_new();
    EVP_DigestInit_ex(hash_context, EVP_sha512(), NULL);

    EVP_DigestUpdate(hash_context, value_to_hash, size);

    unsigned hash_length_bytes = hash_length_/8;
    unsigned char hash_result_bytes[hash_length_/8];

    EVP_DigestFinal_ex(hash_context, hash_result_bytes, &hash_length_bytes);
    EVP_MD_CTX_free(hash_context);

    BN_bin2bn(hash_result_bytes, hash_length_bytes, hash_result);

    char *hash_result_hex = BN_bn2hex(hash_result);
    printf("hash : %s\n", hash_result_hex);

    return hash_result;
};

ShaweTaylorRandomPrimeResult RSAKeyGeneration::generateRandomPrimeWithShaweTaylor(int length, BIGNUM* input_seed){
    ShaweTaylorRandomPrimeResult result {};
    BIGNUM *prime_seed = input_seed;
    BIGNUM *number_one = BN_new();
    const char *hex_one = "1";
    BIGNUM *number_two = BN_new();
    const char *hex_two = "2";

    BN_hex2bn(&number_one,hex_one);
    printf("starting shawe taylor\n");
    BIGNUM *hash_prime_seed = hashBigNum(prime_seed);
    BIGNUM *inc_seed = BN_new();
    BN_add(inc_seed, prime_seed, number_one);
    BIGNUM *hash_inc_seed = hashBigNum(inc_seed);

    BIGNUM *c = BigNumHelpers::xorBigNums(hash_prime_seed, hash_inc_seed);
    
    int length_minus_1 = length - 1;

    return result;
};


void RSAKeyGeneration::generateRandomSeed(){
    int security_strength = getSecurityStrength();
    int length = 2 * security_strength + 1;
    int success = BN_rand_ex(seed_, length, BN_RAND_TOP_ANY,BN_RAND_BOTTOM_ANY,security_strength,context_);
    assert(success == 1);
}

void RSAKeyGeneration::setEParameters(){
    // the max and min values for e as a hexadecimal string
    const char *hex_e_min = "010000";
    const char *hex_e_max = "010000000000000000000000000000000000000000000000000000000000000000";

    // set them to BIGNUM
    BN_hex2bn(&e_min_, hex_e_min);
    BN_hex2bn(&e_max_, hex_e_max);
}

void RSAKeyGeneration::setMinPrimeValue(){
    const char *hex_min_prime = "0";
    if (keylength_ == 2048) {
        hex_min_prime = "B504F333F9DE68000000000D69DD51BA07CF0930728CA984CB424FC1B7692DDBFB70A9E5D469EADD536D45398DBBCD6022779634136D29612502CB8F6F04FB3B56A2928A53073CE3978083009F5EA4E0769E4764B0DD62D32B887102580000000000000000000000000000000000000000000000000000000000000000000000";
    } else if (keylength_ == 3072) {
        hex_min_prime = "B504F333F9DE68000000000D7D4F8EC5E6F9B24422D017252D192AF704E153170ADAD97CC0E577EA17BBCCAC3B5D45DC7BBF091F9F7689FB695C4090112C398E9DEA1F7542D12CFD4C15C4C470EC669C40F3A44756C31D6DE70D14567EE58B317033D483B06CEF75B304CCAC47969D0B855F372238BFCCDBC693CE1379C972302BF4C903C0079A203498000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    } else if (keylength_ == 7680) {
        hex_min_prime
    } else if (keylength_ == 15360){
        hex_min_prime
    }
    BN_hex2bn(&min_prime_value_, hex_min_prime);
}

void RSAKeyGeneration::setMinPQDiff(){
    const char *hex_min_diff = "0";
    if (keylength_ == 2048) {
        hex_min_diff = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    } else if (keylength_ == 3072) {
        hex_min_diff = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    } else if (keylength_ == 7680) {
        hex_min_diff
    } else if (keylength_ == 15360){
        hex_min_diff
    }
    BN_hex2bn(&min_pq_diff_, hex_min_diff);
}

int RSAKeyGeneration::getSecurityStrength(){
    int security_strength = 0;
    if (keylength_ == 2048) {
        security_strength = 112;
    } else if (keylength_ == 3072) {
        security_strength = 128;
    } else if (keylength_ == 7680) {
        security_strength = 192;
    } else if (keylength_ == 15360){
        security_strength = 256;
    }
    return security_strength;
};

int RSAKeyGeneration::getKeyLength(){
    return keylength_;
};

int RSAKeyGeneration::getPrimeLength(){
    return keylength_ / 2;
};