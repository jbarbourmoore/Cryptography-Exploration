#include <gtest/gtest.h>  
#include <cstdio>

#include "AESDataBlock.hpp"

TEST(AESDataBlock_Tests, right_shift_8_test){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block >> 8;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}
TEST(AESDataBlock_Tests, right_shift_1_test){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x7f, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block >> 1;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, right_shift_17_test){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block >> 17;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, left_shift_8_test){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0xff, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block << 8;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, left_shift_1_test){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0xff, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xfe};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block << 1;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, left_shift_1_extra_test){
    unsigned char starting_value[16] = {0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0xfd, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xfe};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block << 1;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, left_shift_127_test){
    unsigned char starting_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
    unsigned char expected_value[16] = {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block << 127;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, left_shift_23_test){
    unsigned char starting_value[16] = {0xfe, 0xfe, 0xff, 0xff, 0xff, 0xab, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0xFF, 0xFF, 0xD5, 0xFF, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    block.print();
    block << 23;
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, get_segment_start_8_bits){
    unsigned char starting_value[16] = {0x12, 0xfe, 0xff, 0xff, 0xff, 0xab, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12};
    AESDataBlock block = AESDataBlock(starting_value);
    AESDataBlock segment = block.getSegment(0, 8);
    segment.print();
    AESDataBlock expected_segment = {expected_value};
    EXPECT_EQ(segment, expected_segment);
}

TEST(AESDataBlock_Tests, get_segment_middle_1_bit){
    unsigned char starting_value[16] = {0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char expected_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
    AESDataBlock block = AESDataBlock(starting_value);
    AESDataBlock segment = block.getSegment(8, 1);
    segment.print();
    AESDataBlock expected_segment = {expected_value};
    EXPECT_EQ(segment, expected_segment);
}

TEST(AESDataBlock_Tests, add_segment_middle_8_bit){
    unsigned char starting_value[16] = {0xDE, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char expected_value[16] = {0xDE, 0xAB, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    AESDataBlock segment = block.getSegment(0, 8);
    segment.print();
    block.addSegment(segment, 16, 8);
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, add_segment_middle_1_bit){
    unsigned char starting_value[16] = {0xDE, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char expected_value[16] = {0xDE, 0x8B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    AESDataBlock segment = block.getSegment(8, 1);
    segment.print();
    block.addSegment(segment, 16, 1);
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, increment_1_bit){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    block.increment(1);
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, increment_20_bit){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13};
    AESDataBlock block = AESDataBlock(starting_value);
    block.increment(20);
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, increment_257_bit){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    block.increment(257);
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}

TEST(AESDataBlock_Tests, increment_513_bit){
    unsigned char starting_value[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char expected_value[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00};
    AESDataBlock block = AESDataBlock(starting_value);
    block.increment(513);
    block.print();
    AESDataBlock expected_block = {expected_value};
    EXPECT_EQ(block, expected_block);
}