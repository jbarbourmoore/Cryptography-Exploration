#include <gtest/gtest.h>  
#include <stddef.h>

#include "RSAPublicKey.hpp"
#include "RSAPrivateKey.hpp"

TEST(EncryptionPrimitiveTests, Test_nlen_2048) {

    // inputs taken from NIST Cryptographic Validation Program
    const char *input_n = "B29AA1C9D079B6E77E3307E88C8937B5D211D0F7AC79098C3969F1C2A9F8C17A7CFFD15AC76367F694B00D9C673BB142613C44E0778136582B75C9CAE81B03C2C26F029958019620046A840A9DD40A6C5B9313318294AA42C20BBCCD106141FDFA725AD62AD1CF41A8CF12E894A45C602227A765F7159BCC86E3CC8A08EC8B5AA71C81FBF7F84745767DBDA99AED567D5F06A9B30BD0ED5166C61BFCCF49BB340D4DC74359FC965FAD81798CF95987624D7EE361128B69EB594358DDF59298C6DA286BD885F74A62924BAB899AE6A1A25E695FB2B7C194EB35815646CC2D277ED9DDC9463621A43C21A8AA70FD29DEF7163BAAA71C7F1E694D610EFBE3C76EFF";
    const char *input_e = "3262454CF1B221";
    const char *input_message = "9BCD6D0F92B6495814E2F5701E051FD8EEEEB98C444CE784662CF27DBD8FFD22EBA7AF50E11FDD737203D6242C812899566E1954825B9F2B2F4EBD475A38DDE51E93D9422E0645D917CE19375CC2997C2CF6AFD1FC64522B95B270AAC53CFF674CF00257DB33496B310F0AEB4E6263B45C1F9465525CCE75FEB093B3CA345AB46593782421517248B4A1BB86378D99D1304FFBB664735908E166381E95CE7CF18041A8841F05A62A7D4F3CCA94A55032995EF19D404F25692D42A198491A8984477E937A25098B2C11AEB3FCE325C984FD6A3CEF91EB46E5DFDA9BE34877662F938A32D490D8CAFCD030927D5DFB70BB7632392D343C7EB7D403CE850B864C5C";
    const char *input_d = "0B457CB93653C2E2FB1C70F90FC419A2C5E89145300A46342FD89BDD39251806072C5F350A070BDCDE5403FA4737872D6D8BD10F7BAFAB453ED1F20745326D8E4B2E2359A1120B6A419D7F0DDE0469E68665C28C16DFEFEDD11241381BE3E551C9D342263EC9309CCF96CEE9621CEC1FF8746133BA30FD5C20D2BCEF074BEB0F3019CEDACF52987439ADF7959CBE603BD911DCA19389B0B6212424959B57B4460B37011E18C37C9E805F78555D20BF5FCF6752A4BA3FB8A60EEF28EF59FD4DDA92189BEDD1C2200497D415804D133B8CC3CE60C3EACDAD0C33FB433C4157E6273929A67C27E23018808C008A8EDCD30448353D666A9CDBC7DD0BA19B40B11B19";
    const char *input_cypher = "3A55937F5F38A81F561433D9F3B584D36013DA19FBE23630036F15CBADEB79C8FAD45E9BE8990D7BEE1238BA3128CEBBD706EA9ACF8ED498F17C196CB496318ECE6402C2715CD94AADAAA7D07A27AC1DDBC961DF79482DFC96CFF8C2E4BA2695E2B2E1DD46AA8539E664E2FD8A6B67E93EFE27DA2B1441B042486CF696C0AF90A7313CE110EA1B03A48DF4BBF8704403C58F82944BCDC61E94F2C862AD29C7DA20DB6DCF6E2D78C19272A8F233D6A30BAA1A1F5E9BCF6B1500AA0E89ACAE754C8027929C7BEF1DE5ED1D63B6E3C7C9A37C741023764802B277E9BE8C1266DFF6298BBAFC7A2080BA3D95A69D81E2FEBF3721F08BA49ED83B240CBCFBAA5A7B96";
    const char *input_p = "E4EC37CD7FF974EFE979BEABA30E2902CF1990056D9895F89F07BB3E7956A7BD279A47F843D3402FAFBECAFA381EFD02D6B8D287DD76CE2CE57AA1BF2924AEB473F7C9A11100BBA2A06D7B3CC47B7240C6E562280B1BB5F13B59F8FE75E09D2BFA8F75AB5EC4E739E0DEA292670985DE7916A0C74FA943E9A32865F93A9B8043";
    const char *input_q = "C7BAC374F74D4247A6BD3B8ED29AA9DCFCFFBB066667AB8AEB92DA65F105720A86F9C678E53CEB4656D2192F6600521D2ED16A9A9FA0188D32A8B1E393981AC0ECA18F25B8D8AD679A5BA67EF5DD339C766EFE0BC55FAB161E7E5092A486A1FC510E0D9A9DC88C2DDC30F94BB6360B823B566935956BCEFA3B2DED44058A9895";

    // use inputs to create public key and encrypt before verifying the ecrypted message matches the expected cypher
    RSAPublicKey my_public_key {};
    my_public_key.fromHexCharArray(input_n,input_e);
    const char *encrypted = my_public_key.encryptionPrimitive(input_message);
    EXPECT_EQ(strcmp(encrypted, input_cypher), 0);

    // use inputs to create private key in standard form and decrypt before verifying the decrypted message matches the input
    RSAPrivateKey my_private_key {};
    my_private_key.fromHexCharArray(input_n,input_d);
    const char *decrypted = my_private_key.decryptionPrimitive(encrypted);
    EXPECT_EQ(strcmp(decrypted, input_message), 0);

    // use inputs to create private key in quintuple form and decrypt before verifying the decrypted message matches the input
    RSAPrivateKey my_quint_private_key {};
    my_quint_private_key.fromHexCharArray_QuintForm(input_n,input_d,input_p,input_q);
    const char *decrypted_quint = my_quint_private_key.decryptionPrimitive(encrypted);
    EXPECT_EQ(strcmp(decrypted_quint, input_message), 0);

}

TEST(EncryptionPrimitiveTests, Test_nlen_3072) {

    // inputs taken from NIST Cryptographic Validation Program
    const char *input_n
    const char *input_e = "0C8D9AA07B";
    const char *input_message = "26D2A5AE8C6E11E9CDFBAB41EAA60971CFEEF3B28FA7AA7E847078FB9BC6F7A9D99E3C83852A75CC842D27FC3B1629F6DFB66A661BFBDBAA4D353B0302E9EF3615A9C41C4DD01A2E814B271CC638CF2C9575496E54ABFB65C4D2B6BFC64B104D7B349536889409FE67E3834BE648F1823F052B6DC3C2D188D4091ACD128C138E1A8401D16FA03831F913E6715BCE8DC760FA8B9DAF2DD9DF64CCE78E940D7BAF21299B287E1C03361A5D5A554E284DF400DBE849372F275AF0603F4F6E7DBF148FAA34A41268D9FFD1AAEC6DB8994111B7554D1A3356A9187D4B39C8884868FB4CB745139974AECDB61DD8D87F7E2786CA154903F3DB0D97DF40180266029C508D66BD2B24FE5A3E6DB7286AA0899F26952A4CD9246012D54834F427485F3F5E8BB9A1ADF047BF1ACDC69E5D9761DB58E0EA7E1A005F0B4CF553C87609E5029D25D0D8D4F888A201982E4823206872FCF80E5506BCE5C4E78BFDC824A63E66759C9A1A1D29DE383EBDBD6BA00474DFF946EDFC58D9737DF9FC59AEF716FF81F1";
    const char *input_d = "089DFF855967E92592B77855E41EADF680DF519F1341D02920A3AF30DB531E730B4B09553A1F982A57147B165020D2DF5550606362875FC0F159A8F9A2C99964F74082FA79A4E1B9C8C74BF63D32C4D3BD54055516DB4C0594DC77E260ADB2B66240E35FCFD40E4D604B40BAD6FC73D4839094ADA863B16998E01A445BEE65BB037EB9BF19C9369F677E9A21063A613B98B75CAC21E1E8869616E38D2598B9839E06D15D130B22FDC1DA4A164577BF60686B8E8E2D07AA4CE34696A7D55E825734539D419D990F31EBF9A258B222C9047588582E3E9B22FB5C319C27F0CC4EAEB453068EC29C77F2874795C6349D6408D5360D4BF331CA923C795FE80CC7FA378451B3A33F7ECC92FDB590DA7A0DD0CDDF08C3ADEFD0B7F76DFD848B5E4436705F102B9621B0EE03F6442974DAEBD3546E0D06546E1A119D392775923DA0056003C0B5121546026C72F8582D885A83B0BA14EDCC0A76BCFF297FF68743DA5A473A7BF23DF83DD668AA5F64C82E74200E82F8A268967CA6984D062478AB264137";
    const char *input_cypher = "3A3CD8638B9729C3D00BE7304F124A8D987D7A0A5C2FCCD977846E5F334DFCE3BDF528A09F12EEA07259FC0F5223008744CCD3F156A8F562DD777679379B1DCD1A39534F9A8E596B6FD1B25292A950EEFEA6FA501A161D1144C32FF87D5D7225AC8EB8A311FE2D3F1CED0774B93A250C6FF3D7A9C0C95BD2DD654EC8CD765977456C8CB8B5C0E1D54FBB1976E8FA76928BFD6ED7D5B79139466E63F3D47DFA3664F06E30CDB109DECAAC615202A24041582246C8ACBD67B49D5969BF9FAC82B10D1C19293BCFB5D1C51B943D6B2F92B02D03A0572E08527D19A9FF8283CFFA5FE9CD8195536E44F87A74D1FF3B815D9DDCED8F990C6C7E8FB16C977FC73046971ACFBEC9CC6F9DBD9CACC4AC9704EAB129C7B3C966142FA8974D04F12BE1A53E216803253387648FB6F5AE3C1515DCB65EC3616D6E67001EF5F25131FF54B34AE9D9C274BA48748A3421316632259AE87E0446DE2C8E18E3DDBD6DA81299B1E75CE061B0FD5BBAA4A18DFB864BDDDC639A63CAB13C0F2B4A89C0D074EC161732";
    const char *input_p = "F6B4980A9A2FF0E04ED37D19719F997A19253660DFD21C9D19819B631917ACDE4F3095161D89FEAFE90283521339E6FCDDAB9E0FB4A3738BCAB69498DEDAE2D1259052589B7625B734EB03535DE753AE19793DFCE8D26EA188318C4341339AEC56E03A67E700761AA787E22344FCBC57F9D6CB79C739B25FF739581291CD3F170E47501A3E4D85E5F304359B3266DBE1431E10804AA934A6FB78B46CE66A1FDD22158A1FDD007609571623FBDFAED8ABA63F7CB1AA612C98672E1AB456DCFB17";
    const char *input_q = "C68947B03773BEB9EFEC2D9984EDE27E3F3228C75C87E9F82880BD3DFFA56BA509AF92A75777E7B5E13A3858C97176E7E5253EB7A602BE58309F281F29A0F42745F70BFBD4C8A37DEACEC91AE01A9851A0E7DEF3CDB09D14AB676FFBF5D284AB55197362C217CFC3190B68431669C0A09A1DF1AE4B4A40B859CD12A38BBC895212DF84A1BB326E91962A3E0E69F6E1BD0BFBB77E24978AD9BA2F9430A865ED571AD139F826CB9C529B1645D623FBE8EDFEBB097913A3234CD8AA6C58840AA8DB";

    // use inputs to create public key and encrypt before verifying the ecrypted message matches the expected cypher
    RSAPublicKey my_public_key {};
    my_public_key.fromHexCharArray(input_n,input_e);
    const char *encrypted = my_public_key.encryptionPrimitive(input_message);
    EXPECT_EQ(strcmp(encrypted, input_cypher), 0);

    // use inputs to create private key in standard form and decrypt before verifying the decrypted message matches the input
    RSAPrivateKey my_private_key {};
    my_private_key.fromHexCharArray(input_n,input_d);
    const char *decrypted = my_private_key.decryptionPrimitive(encrypted);
    EXPECT_EQ(strcmp(decrypted, input_message), 0);

    // use inputs to create private key in quintuple form and decrypt before verifying the decrypted message matches the input
    RSAPrivateKey my_quint_private_key {};
    my_quint_private_key.fromHexCharArray_QuintForm(input_n,input_d,input_p,input_q);
    const char *decrypted_quint = my_quint_private_key.decryptionPrimitive(encrypted);
    EXPECT_EQ(strcmp(decrypted_quint, input_message), 0);

}

TEST(EncryptionPrimitiveTests, Test_nlen_4096) {

    // inputs taken from NIST Cryptographic Validation Program
    const char *input_n = "BDBF983DB3E670EBB91EC6D3EC3C268352593A8BAB4BA7E3C84B700990CACF5A7E5B090149639CF9FC015ECCD87CA327E76AF01F7951595BEF600C0339CD5748CEA4EF21786BED2D15994C43EBA95C132BF858D856CC61EB9B29C9891E297615FA6AB876978D5BAA23A04C35D8079D0BA2C9AECF45A225AAAD44A6CF2B7DBD9AEA4BA95DA0F9526C55377689764220CA1FF5BB467D1024D1DA28C0DD67F3FD27E5FCC95EC6AC940508866576C698D7C20785992106D1EBFF7E9951C0CA697CBE23E701398DDA9CD483B76CDEEB2A054F425CEF56A2B5B25F29CA93870E07D3A61371812D59F83374E9B479357556FE625B534CD89F89C278E42F1786D1C692CDA29E71C22B430D8EED151153AB860F5E2CCF5901803DFC14D017C2F5C7CE02093D86F56435FB38854231250E7064D7AF8624677076C6FA656E6F82A7CDB41E457F9F24D95BB92A92BCFD706801522A17BC7F59CCBACD5D72CC758E84683CC37C32F436083DB1415C23CB8E9D8C37941183EFA1D001EA00FE4A50DA7CE32DA154E3AD8069234D4ABA43623153D32B628B523887C5BE52AA0342C6A4780CB40345FC11E3AD7D6327EA69174131D08DB2BC8EB12589A23ED5D0AACEC73240CF86C6E7E3CB4AFA33014D5C56952DA3AF941135C0E0FD2F23B26D65F0D73FBCC6E7EBBA1FEE8E4C9A595B656A19DF48AE7FD107F4B6F70588B133CC795A3F111AF095";
    const char *input_e = "19446BFED83073";
    const char *input_message = "2E0AD8748F28DF53165616BA7BB001EF25FD6758D651E1EBC5CE83E157419AE26DCA06B8533096988CAF4D56C71F9880948F547B78B5D6481A7635D32EA7D59A6EF91E013D496FE609371BFCD47A88E89CD4EF9141E030934E1DD20724651BC6EC6A6108D8EE6496C3E2E3FCC0D0EE52CFBBD38A6F772A46D4C7DE715DB01D9AFF1774844F2DB463E8A11CE7B386A75090E2CAAC8DB7FFD5495C79229D32DDAACE81C5BA1676064654060D8C43C583FA662AC2AADB06677F9820FA91E5E680A6C969B98736FDD1857FC38F4E934E64A43D41B919A0962DDC09EBDEAE7885C9535C7ED5A029DAA714CA4E8011A1FB3079B5BD9645D5344E914A3C2E9F1578A4A427C58C13654FA35F141552A604E59434B01F37BDB17FEEF2CC54737AAA23BA4471A818BB2097594134DBAF9D3D785F3B30A824E35B52606FBCCBCE3145B652B6DE773CAB6B844E6C79FBBAD20D2B19E293B03DE2E3BA1CB813C614588C74A587EC5C6913BCDB9BBD10A04973AFE3F4648509D073F76EF1F8EA5F002F14F08B1ADDBE159E4F824B71699CA3024653676006ADFB0B7608F82EEC890E682E8F1EF25372A8AC64721D227E2E7CE3161CDF9E254911A6A5351A9CFF82B2ABAF33E05EC7DB4A931743A72D8EF0DB1CE80164D3CC5652C28C19CC2495C3C0F5A6C53210FF25AA2F4C58ED473C6983BFB3E12F5AE7B31DA944CAB9A7E2B6A8629E23DB57";
    const char *input_d = "1BC5E6614CA2317B4B5976B785BF226EB7ED1C890F473D64D827B57D3DE86D3895A9105F94D7473694B9A23D8E920158A8AB41AAE4D54506B642EAAB75F53DDA93F7835D43FD37238371A191160B3C6B7D26A5B28AE1D972D3B80B00F475B3EEE485719B4F30DB50179F7283E75AB0EEF8EB0112EBA307F8224AC8C90DAD6087506878D55B4FA6CC1EAD0EFB0C1A403A616787DDDFD0E736B97226B41B88B632BCF6C5D429734D4DA5D9249535C8AD69D4477A2A66F6337283BBA50B7344A3D436915C03CDE1DCB4197D096407336E0022CAB69D2015F1C6059B264980F432D2B1ECF88B9E94CDB4228A2D7855AB620594F2DEC36EEAEF4FE2E4AEDC3624B194B61E679306823384DFB04324775FA3CB4A3AA0C27719D3A16CE6C4B5012E2463D594DFDE1B8DFA6453F85739C62077367B87B859FC0A1F42A3B98BFBF4DEEE7A531BDD5259632785F02872080ABB2B16109EBA838DF206E663680F1AA939AF11F271F2846232C12A171F15272620445A554969DBACA1185007F11362CFA5380C0EF7F52221ED96ECB75EDCEF05EC7E1FA26BB709EC640879031D9C70BE34F100FB9829D9F71BA84463EDE07EE3ABB5FC986A0AAB5BDEFF4C7110D2B0D4E4D8AC7DBD68CAEFBBDD3107AFF7B339A4841FC467B6D4316E639B9FC6CBB4ADB0391102D3DF90FFC647FD3B1614D5120699D4B500E9531D499DE61205DB668C6CEC93";
    const char *input_cypher = "A2D69BDB68D59E922DB0A01DA9DFD230A3171E93C7A8113958C46FEA88CBDC6AA4D1C2B4E776909A90098DA870CFC31A82C768C1BB8E52658B8351F86F2F9BBB5910EC6CF955F80CD9D922190E9CBCAABCDF192486357B913EBC09DF826973B2229B442D797FF99CEBEFF7361F91229462D461E2E2BE569D3D66ECF3F1E3FBD01041AA30301F7E1EC2FBE2DDD3B9F72BAFFAC37D3983F4CDCC754CF79EBC97CDCCCAEF17BCD28F25519A66D78B23138A5D8AAF89B1C89AFF596703BF44D0B828D26D00E64355B65F837445D3834E35CF3591C756E46A3BCDB0336D7331129A976EE925C0F2481C25E194F3ED954B33C6DB35D2DF682712F82EF32E5F7B98F37762DB1FB715100407702F7DF7636AC0DE93E80B258AFC738DA03AD0F74F8C555F8C5757552AC6AFE75A5CDCDBB4B333FFEB7EECD0F77FCEBA31497EC4F75F644C0B32AB9669AB5D7FB903A558B6A4D61EFEC857B3D9609137EDC101874668EA00B5927F8BD232C74232C63188B7BC7B32D0C42CE16019DF8ABD7DC831ED8F46EA8C5C1432D6A6E32BAAB7CDB9EB4FB4B6F3EF168D52765DC9C55632B65D72F9FF801CD86C726F21E6527F58BDE3A5E1F03326A3E78EC60764C987A1F88D35AA0274B05FCC3FE8DC97D6A4535ADB2651674EBFEC08746EAFDFE918544F06F88BA5D933E4340C2FB01F2E18553EA5F07D1DD6A7F018DB843658E46CFCF0080BB02E";
    const char *input_p = "F57A743355E06333FF7F124E36341248BA2FB3CF8674A41131F73003070A2FEB818FE0DF66474C44D4E2DD3839AE328AA7DE44FB32BC7BD659DB7AA1253716DCB84CFC69BFB926FF2BE68B014BFDEDAB99563B1DE7E8387EF89F988D46772B60E329362659CCE0E2FB2BE36B3A7376F269C1195197FA06EF7356359F9B222B0F51C674C2F0566DB3A7D217EDD7ABD42D3F34B072867D2658EB267DC67F87B51319BB160FA0B5261933A0CFBD52F116F01DB426503644CA68D51578166FA05376906ADFED9BF1E26584E6B651E5FB6D643DED67D2FD457DF8A8B201821BAB00E9F1B4B9C05653DD84872496B43C731AD69893C26F8A442B4A2A35417976698A1B";
    const char *input_q = "C5E1A2E3F28CCC13859CC6B6663A755C1280377B1BE62E3BF42B5057D12AFFB0AF7F27492A2AFC1AF42081F5DB3EA803C76B34C891364CEC2BCD0EEFA7C1330692A2F40F3D3CC84749C9B168D35908021BF71804309253A38F6485F27146E3A688544FE441C4FADF70655BE4D9DB51B0C080368A67BB5BE18735D3371B38ADA4AD8B43240AC98251817FC08B73DAD9639BA12B1EEB9132CC795AADC4167B5E31F1CEBFB33EEC52EB9E211B9A88D43B34F9EAB37A699E736D3F82115CB421739D194860AF0FD34D4E1B95BD5EFE714F8BB762E589197879527DCE868C3B6D815C801A0BD760F297DF73CCF3E3F0F13BC60F4DCA367EF3B8251FC0A2A6B3C11B0F";

    // use inputs to create public key and encrypt before verifying the ecrypted message matches the expected cypher
    RSAPublicKey my_public_key {};
    my_public_key.fromHexCharArray(input_n,input_e);
    const char *encrypted = my_public_key.encryptionPrimitive(input_message);
    EXPECT_EQ(strcmp(encrypted, input_cypher), 0);

    // use inputs to create private key in standard form and decrypt before verifying the decrypted message matches the input
    RSAPrivateKey my_private_key {};
    my_private_key.fromHexCharArray(input_n,input_d);
    const char *decrypted = my_private_key.decryptionPrimitive(encrypted);
    EXPECT_EQ(strcmp(decrypted, input_message), 0);

    // use inputs to create private key in quintuple form and decrypt before verifying the decrypted message matches the input
    RSAPrivateKey my_quint_private_key {};
    my_quint_private_key.fromHexCharArray_QuintForm(input_n,input_d,input_p,input_q);
    const char *decrypted_quint = my_quint_private_key.decryptionPrimitive(encrypted);
    EXPECT_EQ(strcmp(decrypted_quint, input_message), 0);

}