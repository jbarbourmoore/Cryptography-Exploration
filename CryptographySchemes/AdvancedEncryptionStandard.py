
class AES():
    '''
    This class should include the cypher and most of the necessary components for Advanced Encryption Standard

    As laid out in nist fips 197
    https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197-upd1.pdf
    '''

    # From NIST FIPS 197 : Table 4. "SBOX(): substitution values for the byte xy (in hexadecimal format)"
    substitution_matrix = [
        [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
        [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
        [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
        [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
        [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
        [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
        [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
        [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
        [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
        [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
        [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
        [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
        [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
        [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
        [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
        [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]
    # From NIST FIPS 197 : Table 6. "INVSBOX(): substitution values for the byte xy (in hexadecimal format)""
    inverse_substitution_matrix = [
        [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
        [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
        [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
        [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
        [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
        [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
        [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
        [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
        [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
        [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
        [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
        [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
        [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
        [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
        [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
        [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]]
    # From NIST FIPS 197 Table 5. "Round constants"
    round_constants = [
        [0x01,0x00,0x00,0x00],
        [0x02,0x00,0x00,0x00],
        [0x04,0x00,0x00,0x00],
        [0x08,0x00,0x00,0x00],
        [0x10,0x00,0x00,0x00],
        [0x20,0x00,0x00,0x00],
        [0x40,0x00,0x00,0x00],
        [0x80,0x00,0x00,0x00],
        [0x1b,0x00,0x00,0x00],
        [0x36,0x00,0x00,0x00]]
    # From NIST FIPS 197 Section 5.1.3 "MixColumns()"
    mix_columns_matrix = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]]
    
    def __init__(self, key):
        '''
        This method should initialize aes with a given key

        Parameters : 
            key : str
                The key for the aes algorithm
        '''
        self.block_size = 128
        self.key = key

    def substituteBytes(self, s):
        '''
        This method substitutes bytes according to the substitution matrix
        According to Figure 2 from NIST FIPS 197  "Illustration of SUBBYTES()"

        Parameters : 
            s : [[hex]]
                The 4x4 matrix which is being substituted
        '''

        for r in range(0, 4):
            for c in range(0, 4):
                s_rc_r = s[r][c]//16
                s_rc_c = s[r][c]%16
                s[r][c] = self.substitution_matrix[s_rc_r][s_rc_c]

    def shiftRows(self, s):
        '''
        This method shifts rows within a 4x4 matrix s[r][c]
        According to Figure 3 "Illustration pf ShiftRows()" of Nist Fips 197

        Parameters :
            s : [[HEX]]
                The 4x4 matrix which is having its rows shifted
        '''

        s[0][0], s[0][1], s[0][2], s[0][3] = s[0][0], s[0][1], s[0][2], s[0][3]
        s[1][0], s[1][1], s[1][2], s[1][3] = s[1][1], s[1][2], s[1][3], s[1][0]
        s[2][0], s[2][1], s[2][2], s[2][3] = s[2][2], s[2][3], s[2][0], s[2][1]
        s[3][0], s[3][1], s[3][1], s[3][3] = s[3][3], s[3][0], s[3][1], s[3][2]

    def mixColumns(self, s):
        '''
        This method mixes columns for a 4 x 4 matrix
        According to Figure 4 "Illustration of MIXCOLUMNS()" of Nist Fips 197

        Parameters :
            s : [[int]]
                The 4x4 matrix which is having its rows shifted
        '''
        for r in range(0,4):
            for c in range(0,4):
                first_mult = self.xTimes(s[0][c],self.mix_columns_matrix[r][0])
                second_mult = self.xTimes(s[1][c],self.mix_columns_matrix[r][1])
                third_mult = self.xTimes(s[2][c],self.mix_columns_matrix[r][2])
                fourth_mult = self.xTimes(s[3][c],self.mix_columns_matrix[r][3])
                s[r][c] = first_mult ^ second_mult ^ third_mult ^ fourth_mult

    def xTimes(self, first_byte, multiplication_factor):
        '''
        This method multiplies two hexadecimal numbers as a polynomial, ensuring the end result is still a byte
        From Nist Fips 197 Section 4.2 "Multiplication in GF(2**8)"

        Parameters :
            first_byte : int
                The first byte to be multiplpied
            multiplication_factor : int 
                The factor the byte is being multiplied by, up to 3
        Returns
            byte: int
                The result of the multiplication as a single byte
        '''

        if multiplication_factor == 1:
            return first_byte
        temp = (first_byte << 1) & 0xff
        if multiplication_factor == 2:
            return temp if first_byte < 128 else temp ^ 0x1b
        if multiplication_factor == 3:
            return self.xTimes(first_byte, 2) ^ first_byte
        
    def rotateWord(self, word):
        '''
        This method rotates a word
        As described by section 5.10 of NIST FIPS 197

        Parameters :
            word : [int,int,int,int]
                a four number word to be rotated
        '''

        word[0],word[1],word[2],word[3] = word[1],word[2],word[3],word[0]

    def substituteWord(self, word):
        '''
        This method substitutes a word
        As described by section 5.11 of NIST FIPS 197

        Parameters :
            word : [int,int,int,int]
                a four number word to be substituted
        '''
        for c in range(0, 4):
                word_c_r = word[c] // 16
                word_c_c = word[c] % 16
                word[c] = self.substitution_matrix[word_c_r][word_c_c]

    def printValueAsHex(self, hex_value):
        '''
        This method prints out a single hex value followed by a comma and space
        '''

        print('{:02x}'.format(hex_value), end=', ')
    
    def print4x4MatrixAsHex(self,matrix):
        '''
        This method print out a 4x4 matrix as a formatted hex

        Parameters : 
            matrix
                The 4x4 matrix to be printed to the console
        '''

        for r in range(0,4):
            for c in range(0, 4):
                self.printValueAsHex(matrix[r][c])
            print()

    def printWordAsHex(self,word):
        '''
        This method print out a wor as a formatted hex

        Parameters : 
            matrix
                The word to be printed to the console
        '''

        for c in range(0, 4):
            self.printValueAsHex(word[c])
        print()

    def keyExpansion():
        '''
        This is the key expansion method which should be implemented by the subclasses
        '''

        raise NotImplementedError

class AES128(AES):
    '''
    This class is a subclass of AES with a key length of 128 bits
    '''

    def __init__(self, key):
        '''
        This method should initialize aes 128 with a given key

        Parameters : 
            key : str
                The 128 bit key for the aes algorithm
        '''

        super().__init__(key)
        self.key_length = 128
        self.number_of_rounds = 10

    def keyExpansion():
        pass

class AES192(AES):
    '''
    This class is a subclass of AES with a key length of 192 bits
    '''

    def __init__(self, key):
        '''
        This method should initialize aes192 with a given key

        Parameters : 
            key : str
                The 192 bit key for the aes algorithm
        '''

        super().__init__(key)
        self.key_length = 192
        self.number_of_rounds = 12
    
    def keyExpansion():
        pass

class AES256(AES):
    '''
    This class is a subclass of AES with a key length of 256 bits
    '''

    def __init__(self, key):
        '''
        This method should initialize aes 256 with a given key

        Parameters : 
            key : str
                The 256 bit key for the aes algorithm
        '''

        super().__init__(key)
        self.key_length = 256
        self.number_of_rounds = 14

    def keyExpansion():
        pass

aes_256 = AES256("key")
print(aes_256.key)
print("- - - - - - - - - - - -")
print("Mix Columns Example Matrix:")
example_matrix = [[0xf2,0x01,0xc6,0xdb], [0x0a,0x01,0xc6,0x13],[0x22,0x01,0xc6,0x53], [0x5c,0x01,0xc6,0x45]]
aes_256.print4x4MatrixAsHex(example_matrix)
aes_256.mixColumns(example_matrix)
print("Mixed Columns")
aes_256.print4x4MatrixAsHex(example_matrix)
print("- - - - - - - - - - - -")
print("Substitute Example Matrix:")
example_matrix = [[0x53,0x01,0xc6,0xdb], [0x0a,0x01,0xc6,0x13],[0x22,0x01,0xc6,0x53], [0x5c,0x01,0xc6,0x45]]
aes_256.print4x4MatrixAsHex(example_matrix)
aes_256.substituteBytes(example_matrix)
print("Substituted:")
aes_256.print4x4MatrixAsHex(example_matrix)
print("- - - - - - - - - - - -")
print("Substitute Example Word: ")
example_word = [0x53, 0xf2, 0x12, 0x32]
aes_256.printWordAsHex(example_word)
aes_256.substituteWord(example_word)
print("Substituted:")
aes_256.printWordAsHex(example_word)
print("- - - - - - - - - - - -")
print("Rotate Example Word: ")
example_word = [0x53, 0xf2, 0x12, 0x32]
aes_256.printWordAsHex(example_word)
aes_256.rotateWord(example_word)
print("Rotated:")
aes_256.printWordAsHex(example_word)